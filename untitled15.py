# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HpbrYrsDKRwzdp0aGgcBojJ_sCU8BEgt
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier


iris = load_iris()
X, y = iris.data, iris.target


models = {
    "Logistic Regression": LogisticRegression(max_iter=200),
    "SVM": SVC(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier()
}

results = {}
for name, model in models.items():
    scores = cross_val_score(model, X, y, cv=5)
    mean_score = scores.mean()
    results[name] = mean_score
    print(f"{name}: Mean Accuracy = {mean_score:.2f}")


best_model = max(results, key=results.get)
print(f"\nThe best-performing model is {best_model} with an accuracy of {results[best_model]:.2f}.")

results_df = pd.DataFrame(list(results.items()), columns=["Model", "Mean Accuracy"])
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.barplot(x="Mean Accuracy", y="Model", data=results_df, palette="viridis")
plt.title("Model Performance on Iris Dataset (Cross-Validation)")
plt.xlabel("Mean Accuracy")
plt.ylabel("Model")
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay

digits = load_digits()
X, y = digits.data, digits.target


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

param_grid = {'n_neighbors': range(1, 21)}
grid_search = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)


best_k = grid_search.best_params_['n_neighbors']
best_score = grid_search.best_score_
print(f"Optimal value of K: {best_k} with a cross-validation accuracy of {best_score:.2f}")

knn = KNeighborsClassifier(n_neighbors=best_k)
knn.fit(X_train, y_train)


y_pred = knn.predict(X_test)


test_accuracy = accuracy_score(y_test, y_pred)
print(f"Test accuracy with K={best_k}: {test_accuracy:.2f}")


conf_matrix = confusion_matrix(y_test, y_pred)


plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=digits.target_names, yticklabels=digits.target_names)
plt.title(f"Confusion Matrix (K={best_k})")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()